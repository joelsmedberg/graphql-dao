/**
 * Autogenerated interface, DO NOT MODIFY
 */
/* tslint:disable */
import { GraphDao } from "./graph-dao";
import { IViewSentEmail } from "./interfaces/view-sent-email.generated"; 
import { IViewSentLetter } from "./interfaces/view-sent-letter.generated"; 
import { IViewTextMessage } from "./interfaces/view-text-message.generated"; 
import { ITriggerBase } from "./interfaces/trigger-base.generated"; 
import { ISentEmail } from "./interfaces/sent-email.generated"; 
import { ISentLetter } from "./interfaces/sent-letter.generated"; 

export class CommunicationDao extends GraphDao {
    
    /**
     * Insert html string and get pdf as base64 string back
     * */
    public htmlToPdf = (html: string): Promise<string> => {
        const query = `query communication_htmlToPdf($html: String) {
    communication_htmlToPdf(html: $html)
     { undefined } 
}`;
        return this.post({ query, variables: { html: html } });
    }

    
    /**
     * List all the emails sent in my municipality
     * */
    public listSentEmails = (): Promise<IViewSentEmail[]> => {
        const query = `query communication_listSentEmails {
    communication_listSentEmails
     { emailId
 createdAt
 createdBy
 from
 toAddress
 cc
 bcc
 subject
 htmlBody
 plainText
 parentObjectType
 parentObjectId
 templateUsed
 messageId
 account
 firstName
 lastName
 municipality } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * List all the letters sent in my municipality
     * */
    public listSentLetters = (): Promise<IViewSentLetter[]> => {
        const query = `query communication_listSentLetters {
    communication_listSentLetters
     { letterId
 createdAt
 createdBy
 name
 coAddress
 address
 zipcode
 city
 htmlContent
 campaignId
 envelopeId
 numPage
 priorityClass
 uploadedFileId
 parentObjectType
 parentObjectId
 firstName
 lastName
 municipality } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * List all the texts sent in my municipality
     * */
    public listTextMessages = (): Promise<IViewTextMessage[]> => {
        const query = `query communication_listTextMessages {
    communication_listTextMessages
     { textMessageId
 createdAt
 createdBy
 phoneNumber
 message
 parentObjectType
 parentObjectId
 account
 response
 firstName
 lastName
 municipality } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Gets all relatant information for a student
     * */
    public loadDefaultStudentTemplates = (studentSsnList: string[]): Promise<ITriggerBase[]> => {
        const query = `query communication_loadDefaultStudentTemplates($studentSsnList: [String]) {
    communication_loadDefaultStudentTemplates(studentSsnList: $studentSsnList)
     { parent1 { parentSsn
 createdAt
 createdBy
 firstName
 lastName
 coAddress
 address
 zipcode
 city
 addressMunicipality
 municipality
 phone
 email parentCreatedVia }  parent2 { parentSsn
 createdAt
 createdBy
 firstName
 lastName
 coAddress
 address
 zipcode
 city
 addressMunicipality
 municipality
 phone
 email parentCreatedVia }  participant { placementRoundId
 studentSsn
 schoolTransportSchool
 schoolTransportProgram
 catchmentSchool
 catchmentProgram
 currentGrade
 placingGrade
 inSpecialAdmissionRegion
 isNewlyArrived
 currentSchoolMunicipality
 currentSchoolName
 currentSchoolProgram
 currentPreSchoolMunicipality
 currentPreSchool
 placementAddress
 placementZipcode
 placementCity
 placementAddressMunicipality
 placementLat
 placementLng
 limitedParticipation
 municipalityCaseId
 isVoucherSchoolOnly participantType }  placementRound { placementRoundId
 municipality
 createdAt
 createdBy
 roundName
 roundDescription
 dataLockTime
 frontpageOpenTime
 frontpageCloseTime }  student { municipality
 studentSsn
 createdAt
 updatedAt
 createdBy
 lockNavetUpdates
 lotteryNumber
 debugHelpColumn
 isTestKid
 firstName
 lastName
 parent1
 parent2
 coAddress
 address
 zipcode
 city
 addressMunicipality
 lat
 lng createdVia navetLookupStatus } } 
}`;
        return this.post({ query, variables: { studentSsnList: studentSsnList } });
    }

    
    /**
     * Sends of a batch of custom emails
     * */
    public sendCustomEmails = (emails: ISentEmail[]): Promise<void> => {
        const query = `mutation communication_sendCustomEmails($emails: [SentEmailInput]) {
    communication_sendCustomEmails(emails: $emails)
     { undefined } 
}`;
        return this.post({ query, variables: { emails: emails } });
    }

    
    /**
     * Sends of a batch of custom emails
     * */
    public sendCustomLetter = (letters: ISentLetter[]): Promise<void> => {
        const query = `mutation communication_sendCustomLetter($letters: [SentLetterInput]) {
    communication_sendCustomLetter(letters: $letters)
     { undefined } 
}`;
        return this.post({ query, variables: { letters: letters } });
    }

    
    /**
     * Sends a message to a given phonenumber, max 160 characters
     * */
    public sendTextMessage = (message: string, phoneNumber: string): Promise<void> => {
        const query = `mutation communication_sendTextMessage($message: String, $phoneNumber: String) {
    communication_sendTextMessage(message: $message, phoneNumber: $phoneNumber)
     { undefined } 
}`;
        return this.post({ query, variables: { message: message,phoneNumber: phoneNumber } });
    }

}
