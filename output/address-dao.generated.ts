/**
 * Autogenerated interface, DO NOT MODIFY
 */
/* tslint:disable */
import { GraphDao } from "./graph-dao";
import { IMunicipalityAddress } from "./interfaces/municipality-address.generated"; 
import { IStudentParticipatingType } from "./interfaces/student-participating-type.generated"; 
import { IUploadInputType } from "./interfaces/upload-input-type.generated"; 

export class AddressDao extends GraphDao {
    
    /**
     * List all addresses in your municipality
     * */
    public listAddresses = (): Promise<IMunicipalityAddress[]> => {
        const query = `query address_listAddresses {
    address_listAddresses
     { municipalityName
 address
 city
 zipcode
 lat
 lng } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * List all students with an address not found in the db
     * */
    public studentsWithIllegalAddress = (): Promise<IStudentParticipatingType[]> => {
        const query = `query address_studentsWithIllegalAddress {
    address_studentsWithIllegalAddress
     { municipality
 studentSsn
 createdAt
 updatedAt
 createdBy
 lockNavetUpdates
 lotteryNumber
 debugHelpColumn
 isTestKid
 firstName
 lastName
 parent1
 parent2
 coAddress
 address
 zipcode
 city
 addressMunicipality
 lat
 lng
 isParticipant createdVia navetLookupStatus } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Recalculate all student positions
     * */
    public calculatePositions = (): Promise<void> => {
        const query = `mutation address_calculatePositions {
    address_calculatePositions
     { undefined } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Recalculate all student positions
     * */
    public moveAddressesToParticipant = (placementRoundId: number): Promise<void> => {
        const query = `mutation address_moveAddressesToParticipant($placementRoundId: Int) {
    address_moveAddressesToParticipant(placementRoundId: $placementRoundId)
     { undefined } 
}`;
        return this.post({ query, variables: { placementRoundId: placementRoundId } });
    }

    
    /**
     * Upload address files to be parsed and added to the address table
     * */
    public uploadAddressShp = (dbfFile: IUploadInputType, shpFile: IUploadInputType): Promise<void> => {
        const query = `mutation address_uploadAddressShp($dbfFile: UploadInputType, $shpFile: UploadInputType) {
    address_uploadAddressShp(dbfFile: $dbfFile, shpFile: $shpFile)
     { undefined } 
}`;
        return this.post({ query, variables: { dbfFile: dbfFile,shpFile: shpFile } });
    }

}
