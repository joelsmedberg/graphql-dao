/**
 * Autogenerated interface, DO NOT MODIFY
 */
/* tslint:disable */
import { GraphDao } from "./graph-dao";
import { ISchoolProgramGrade } from "./interfaces/school-program-grade.generated"; 
import { ISchoolProgram } from "./interfaces/school-program.generated"; 
import { ISchool } from "./interfaces/school.generated"; 
import { IViewLastChoiceRanking } from "./interfaces/view-last-choice-ranking.generated"; 
import { IChainSchool } from "./interfaces/chain-school.generated"; 

export class SchoolDao extends GraphDao {
    
    /**
     * Send in a list of Grades and check which ones are in db. Requires operator rights
     * */
    public checkWhichGradesInDb = (grades: ISchoolProgramGrade[]): Promise<ISchoolProgramGrade[]> => {
        const query = `query school_checkWhichGradesInDb($grades: [SchoolProgramGradeInput]) {
    school_checkWhichGradesInDb(grades: $grades)
     { placementRoundId
 schoolMunicipality
 schoolName
 schoolProgram
 grade
 capacity
 choosable
 restrictedChoosability } 
}`;
        return this.post({ query, variables: { grades: grades } });
    }

    
    /**
     * Send in a list of Programs and check which ones are in db. Requires operator rights
     * */
    public checkWhichProgramsInDb = (programs: ISchoolProgram[]): Promise<ISchoolProgram[]> => {
        const query = `query school_checkWhichProgramsInDb($programs: [SchoolProgramInput]) {
    school_checkWhichProgramsInDb(programs: $programs)
     { placementRoundId
 schoolMunicipality
 schoolName
 schoolProgram
 isSpecialProgram
 lowestGrade
 highestGrade } 
}`;
        return this.post({ query, variables: { programs: programs } });
    }

    
    /**
     * Send in a list of schoolNames and check which ones are in db. Requires operator rights
     * */
    public checkWhichSchoolsInDb = (schools: ISchool[]): Promise<ISchool[]> => {
        const query = `query school_checkWhichSchoolsInDb($schools: [SchoolInput]) {
    school_checkWhichSchoolsInDb(schools: $schools)
     { schoolMunicipality
 schoolName
 coAddress
 address
 zipcode
 city
 info
 lat
 lng
 isVoucherSchool
 homepage
 email
 phone
 municipalitySchoolId
 nationalSchoolId } 
}`;
        return this.post({ query, variables: { schools: schools } });
    }

    
    /**
     * Return a schools given school name and school municipality, requires login
     * */
    public getSchool = (schoolMunicipality: string, schoolName: string): Promise<ISchool> => {
        const query = `query school_getSchool($schoolMunicipality: String, $schoolName: String) {
    school_getSchool(schoolMunicipality: $schoolMunicipality, schoolName: $schoolName)
     { schoolMunicipality
 schoolName
 coAddress
 address
 zipcode
 city
 info
 lat
 lng
 isVoucherSchool
 homepage
 email
 phone
 municipalitySchoolId
 nationalSchoolId } 
}`;
        return this.post({ query, variables: { schoolMunicipality: schoolMunicipality,schoolName: schoolName } });
    }

    
    /**
     * Return an array of schools, requires in user
     * */
    public listAll = (): Promise<ISchool[]> => {
        const query = `query school_listAll {
    school_listAll
     { schoolMunicipality
 schoolName
 coAddress
 address
 zipcode
 city
 info
 lat
 lng
 isVoucherSchool
 homepage
 email
 phone
 municipalitySchoolId
 nationalSchoolId } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Returns all students who listed school, requires admin rights
     * */
    public listApplicants = (schoolMunicipality: string, schoolName: string): Promise<IViewLastChoiceRanking[]> => {
        const query = `query school_listApplicants($schoolMunicipality: String, $schoolName: String) {
    school_listApplicants(schoolMunicipality: $schoolMunicipality, schoolName: $schoolName)
     { choiceId
 placementRoundId
 studentSsn
 createdAt
 placingGrade
 studentFirstName
 studentLastName
 municipality
 language
 afterSchool
 choice
 schoolMunicipality
 schoolName
 schoolProgram
 ranking } 
}`;
        return this.post({ query, variables: { schoolMunicipality: schoolMunicipality,schoolName: schoolName } });
    }

    
    /**
     * Update a grade for a program
     * */
    public listChainSchools = (): Promise<IChainSchool[]> => {
        const query = `query school_listChainSchools {
    school_listChainSchools
     { placementRoundId
 schoolMunicipality
 schoolName
 schoolProgram
 recievingSchoolName
 recievingSchoolProgram
 recievingGrade } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Return an array of grades for a round. requires you to be logged in 
     * */
    public listGradesForRound = (placementRoundId: number): Promise<ISchoolProgramGrade[]> => {
        const query = `query school_listGradesForRound($placementRoundId: Int) {
    school_listGradesForRound(placementRoundId: $placementRoundId)
     { placementRoundId
 schoolMunicipality
 schoolName
 schoolProgram
 grade
 capacity
 choosable
 restrictedChoosability } 
}`;
        return this.post({ query, variables: { placementRoundId: placementRoundId } });
    }

    
    /**
     * Return an array of program grades in my municipality
     * */
    public listGradesInUserMunicipality = (): Promise<ISchoolProgramGrade[]> => {
        const query = `query school_listGradesInUserMunicipality {
    school_listGradesInUserMunicipality
     { placementRoundId
 schoolMunicipality
 schoolName
 schoolProgram
 grade
 capacity
 choosable
 restrictedChoosability } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Return an array of schools, requires in login
     * */
    public listProgramGrades = (schoolMunicipality: string, schoolName: string): Promise<ISchoolProgramGrade[]> => {
        const query = `query school_listProgramGrades($schoolMunicipality: String, $schoolName: String) {
    school_listProgramGrades(schoolMunicipality: $schoolMunicipality, schoolName: $schoolName)
     { placementRoundId
 schoolMunicipality
 schoolName
 schoolProgram
 grade
 capacity
 choosable
 restrictedChoosability } 
}`;
        return this.post({ query, variables: { schoolMunicipality: schoolMunicipality,schoolName: schoolName } });
    }

    
    /**
     * Return an array of programs in parents municipality
     * */
    public listProgramsForRound = (placementRoundId: number): Promise<ISchoolProgram[]> => {
        const query = `query school_listProgramsForRound($placementRoundId: Int) {
    school_listProgramsForRound(placementRoundId: $placementRoundId)
     { placementRoundId
 schoolMunicipality
 schoolName
 schoolProgram
 isSpecialProgram
 lowestGrade
 highestGrade } 
}`;
        return this.post({ query, variables: { placementRoundId: placementRoundId } });
    }

    
    /**
     * Return an array of programs, requires in login
     * */
    public listProgramsForSchool = (schoolMunicipality: string, schoolName: string): Promise<ISchoolProgram[]> => {
        const query = `query school_listProgramsForSchool($schoolMunicipality: String, $schoolName: String) {
    school_listProgramsForSchool(schoolMunicipality: $schoolMunicipality, schoolName: $schoolName)
     { placementRoundId
 schoolMunicipality
 schoolName
 schoolProgram
 isSpecialProgram
 lowestGrade
 highestGrade } 
}`;
        return this.post({ query, variables: { schoolMunicipality: schoolMunicipality,schoolName: schoolName } });
    }

    
    /**
     * Return an array of programs in parents municipality
     * */
    public listProgramsInUserMunicipality = (): Promise<ISchoolProgram[]> => {
        const query = `query school_listProgramsInUserMunicipality {
    school_listProgramsInUserMunicipality
     { placementRoundId
 schoolMunicipality
 schoolName
 schoolProgram
 isSpecialProgram
 lowestGrade
 highestGrade } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Adds a new grade to a program
     * */
    public addGrade = (grade: ISchoolProgramGrade): Promise<void> => {
        const query = `mutation school_addGrade($grade: SchoolProgramGradeInput) {
    school_addGrade(grade: $grade)
     { undefined } 
}`;
        return this.post({ query, variables: { grade: grade } });
    }

    
    /**
     * Adds a new program to a school
     * */
    public addProgram = (program: ISchoolProgram): Promise<void> => {
        const query = `mutation school_addProgram($program: SchoolProgramInput) {
    school_addProgram(program: $program)
     { undefined } 
}`;
        return this.post({ query, variables: { program: program } });
    }

    
    /**
     * Creates a new schools, fails if school already exists. Requires operator rights
     * */
    public bulkInsertGrades = (grades: ISchoolProgramGrade[]): Promise<void> => {
        const query = `mutation school_bulkInsertGrades($grades: [SchoolProgramGradeInput]) {
    school_bulkInsertGrades(grades: $grades)
     { undefined } 
}`;
        return this.post({ query, variables: { grades: grades } });
    }

    
    /**
     * Creates a new schools, fails if school already exists. Requires operator rights
     * */
    public bulkInsertPrograms = (programs: ISchoolProgram[]): Promise<void> => {
        const query = `mutation school_bulkInsertPrograms($programs: [SchoolProgramInput]) {
    school_bulkInsertPrograms(programs: $programs)
     { undefined } 
}`;
        return this.post({ query, variables: { programs: programs } });
    }

    
    /**
     * Creates a new schools, fails if school already exists. Requires operator rights
     * */
    public bulkInsertSchools = (schools: ISchool[]): Promise<void> => {
        const query = `mutation school_bulkInsertSchools($schools: [SchoolInput]) {
    school_bulkInsertSchools(schools: $schools)
     { undefined } 
}`;
        return this.post({ query, variables: { schools: schools } });
    }

    
    /**
     * Update, fails if school doesn&#x27;t exist. Requires operator rights
     * */
    public bulkUpdateSchool = (schools: ISchool[]): Promise<void> => {
        const query = `mutation school_bulkUpdateSchool($schools: [SchoolInput]) {
    school_bulkUpdateSchool(schools: $schools)
     { undefined } 
}`;
        return this.post({ query, variables: { schools: schools } });
    }

    
    /**
     * Removes a grade from a program
     * */
    public deleteGrade = (grade: ISchoolProgramGrade): Promise<void> => {
        const query = `mutation school_deleteGrade($grade: SchoolProgramGradeInput) {
    school_deleteGrade(grade: $grade)
     { undefined } 
}`;
        return this.post({ query, variables: { grade: grade } });
    }

    
    /**
     * Removes a program from the database
     * */
    public deleteProgram = (program: ISchoolProgram): Promise<void> => {
        const query = `mutation school_deleteProgram($program: SchoolProgramInput) {
    school_deleteProgram(program: $program)
     { undefined } 
}`;
        return this.post({ query, variables: { program: program } });
    }

    
    /**
     * Update a grade for a program
     * */
    public updateGrade = (grade: ISchoolProgramGrade): Promise<void> => {
        const query = `mutation school_updateGrade($grade: SchoolProgramGradeInput) {
    school_updateGrade(grade: $grade)
     { undefined } 
}`;
        return this.post({ query, variables: { grade: grade } });
    }

}
