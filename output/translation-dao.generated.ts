/**
 * Autogenerated interface, DO NOT MODIFY
 */
/* tslint:disable */
import { GraphDao } from "./graph-dao";
import { ITranslationDefault } from "./interfaces/translation-default.generated"; 
import { IViewNotTranslated } from "./interfaces/view-not-translated.generated"; 
import { ITranslation } from "./interfaces/translation.generated"; 

export class TranslationDao extends GraphDao {
    
    /**
     * Get all translations for the admin panel
     * */
    public getAdminTranslations = (): Promise<ITranslationDefault[]> => {
        const query = `query translation_getAdminTranslations {
    translation_getAdminTranslations
     { undefined } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Given an owner e.g &#x27;JÄRFÄLLA&#x27;, returns all thre translations
     * */
    public getTranslations = (owner: string): Promise<ITranslationDefault[]> => {
        const query = `query translation_getTranslations($owner: String) {
    translation_getTranslations(owner: $owner)
     { undefined } 
}`;
        return this.post({ query, variables: { owner: owner } });
    }

    
    /**
     * Get all missing translations for the admin panel
     * */
    public listMissingDefaultTranslations = (): Promise<IViewNotTranslated[]> => {
        const query = `query translation_listMissingDefaultTranslations {
    translation_listMissingDefaultTranslations
     { admin
 labelKey
 language
 translation } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Update the translation displayed on the homepage
     * */
    public changeTranslation = (translation: ITranslation): Promise<void> => {
        const query = `mutation translation_changeTranslation($translation: TranslationInput) {
    translation_changeTranslation(translation: $translation)
     { undefined } 
}`;
        return this.post({ query, variables: { translation: translation } });
    }

    
    /**
     * Update the translation displayed on the homepage
     * */
    public resetToDefault = (labelKey: string, language: string): Promise<void> => {
        const query = `mutation translation_resetToDefault($labelKey: String, $language: String) {
    translation_resetToDefault(labelKey: $labelKey, language: $language)
     { undefined } 
}`;
        return this.post({ query, variables: { labelKey: labelKey,language: language } });
    }

    
    /**
     * Require root
     * */
    public updateDefaultTranslation = (translation: ITranslationDefault): Promise<void> => {
        const query = `mutation translation_updateDefaultTranslation($translation: TranslationDefaultInput) {
    translation_updateDefaultTranslation(translation: $translation)
     { undefined } 
}`;
        return this.post({ query, variables: { translation: translation } });
    }

}
