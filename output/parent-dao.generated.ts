/**
 * Autogenerated interface, DO NOT MODIFY
 */
/* tslint:disable */
import { GraphDao } from "./graph-dao";
import { IParent } from "./interfaces/parent.generated"; 

export class ParentDao extends GraphDao {
    
    /**
     * Get paretnt object associated with logged in user. Requires logged in as a parent
     * */
    public getMyselfParent(): Promise<IParent> {
        const query = `query parent_getMyselfParent {
    parent_getMyselfParent
     { parentSsn
 createdAt
 address
 address2
 zipcode
 city
 firstName
 lastName
 email
 phone
 lat
 lng } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Get parent for parentSsn, requires operator right
     * */
    public getParent(parentSsn: string): Promise<IParent> {
        const query = `query parent_getParent($parentSsn: String) {
    parent_getParent(parentSsn: $parentSsn)
     { parentSsn
 createdAt
 address
 address2
 zipcode
 city
 firstName
 lastName
 email
 phone
 lat
 lng } 
}`;
        return this.post({ query, variables: { parentSsn: parentSsn } });
    }

    
    /**
     * Returns array with all Parents, requires operator right
     * */
    public listParents(): Promise<IParent[]> {
        const query = `query parent_listParents {
    parent_listParents
     { parentSsn
 createdAt
 address
 address2
 zipcode
 city
 firstName
 lastName
 email
 phone
 lat
 lng } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Parent SSN may not exist already, requires operator right
     * */
    public createNew(parent: IParent): Promise<IParent> {
        const query = `mutation parent_createNew($parent: ParentInput) {
    parent_createNew(parent: $parent)
     { parentSsn
 createdAt
 address
 address2
 zipcode
 city
 firstName
 lastName
 email
 phone
 lat
 lng } 
}`;
        return this.post({ query, variables: { parent: parent } });
    }

    
    /**
     * Updates a parent object, requires operator right
     * */
    public update(parent: IParent): Promise<IParent> {
        const query = `mutation parent_update($parent: ParentInput) {
    parent_update(parent: $parent)
     { parentSsn
 createdAt
 address
 address2
 zipcode
 city
 firstName
 lastName
 email
 phone
 lat
 lng } 
}`;
        return this.post({ query, variables: { parent: parent } });
    }

    
    /**
     * Update the other parent for one of your students, only email and phone, requires parent status
     * */
    public updatePartner(parent: IParent, studentSsn: string): Promise<IParent> {
        const query = `mutation parent_updatePartner($parent: ParentInput, $studentSsn: String) {
    parent_updatePartner(parent: $parent, studentSsn: $studentSsn)
     { parentSsn
 createdAt
 address
 address2
 zipcode
 city
 firstName
 lastName
 email
 phone
 lat
 lng } 
}`;
        return this.post({ query, variables: { parent: parent,studentSsn: studentSsn } });
    }

    
    /**
     * Lets parent update themselves, only email and phone changable, require parent status
     * */
    public updateSelfDef(parent: IParent): Promise<IParent> {
        const query = `mutation parent_updateSelfDef($parent: ParentInput) {
    parent_updateSelfDef(parent: $parent)
     { parentSsn
 createdAt
 address
 address2
 zipcode
 city
 firstName
 lastName
 email
 phone
 lat
 lng } 
}`;
        return this.post({ query, variables: { parent: parent } });
    }

}
