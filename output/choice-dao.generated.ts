/**
 * Autogenerated interface, DO NOT MODIFY
 */
/* tslint:disable */
import { GraphDao } from "./graph-dao";
import { IViewRankingChoiceDistribution } from "./interfaces/view-ranking-choice-distribution.generated"; 
import { IChoiceStats } from "./interfaces/choice-stats.generated"; 
import { IViewLastChoice } from "./interfaces/view-last-choice.generated"; 
import { IViewLastChoiceView } from "./interfaces/view-last-choice-view.generated"; 
import { IChoiceWithRankings } from "./interfaces/choice-with-rankings.generated"; 
import { INewChoiceInputType } from "./interfaces/new-choice-input-type.generated"; 
import { IChoice } from "./interfaces/choice.generated"; 
import { IUploadChoice } from "./interfaces/upload-choice.generated"; 

export class ChoiceDao extends GraphDao {
    
    /**
     * Returns number of choices made for all programs
     * */
    public getChoiceDistributions = (): Promise<IViewRankingChoiceDistribution[]> => {
        const query = `query choice_getChoiceDistributions {
    choice_getChoiceDistributions
     { schoolMunicipality
 schoolName
 schoolProgram
 placingGrade
 ranking
 capacity
 numItems } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * get basic statics of choices
     * */
    public getChoiceStatsAll = (): Promise<IChoiceStats> => {
        const query = `query choice_getChoiceStatsAll {
    choice_getChoiceStatsAll
     { numChoices
 numChoicesApproved
 numStudents } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * get basic statics of choices
     * */
    public getChoiceStatsForGrade = (grade: number): Promise<IChoiceStats> => {
        const query = `query choice_getChoiceStatsForGrade($grade: Int) {
    choice_getChoiceStatsForGrade(grade: $grade)
     { numChoices
 numChoicesApproved
 numStudents } 
}`;
        return this.post({ query, variables: { grade: grade } });
    }

    
    /**
     * List all choices
     * */
    public listAll = (): Promise<IViewLastChoice[]> => {
        const query = `query choice_listAll {
    choice_listAll
     { choiceId
 createdAt
 createdBy
 placementRoundId
 studentSsn
 manualInput
 approvedParent1
 approvedParent2
 manuallyApprovedBy
 language
 afterSchool
 studentFirstName
 studentLastName
 currentGrade
 placingGrade
 municipality
 parentCount
 isApproved } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * get weird view on last choice mixed with rankings
     * */
    public listChoiceDisplayView = (): Promise<IViewLastChoiceView[]> => {
        const query = `query choice_listChoiceDisplayView {
    choice_listChoiceDisplayView
     { choiceId
 studentFirstName
 studentLastName
 language
 afterSchool
 municipality
 isApproved
 address
 zipcode
 coAddress
 city
 parent1
 parent2
 placementRoundId
 studentSsn
 schoolTransportSchool
 schoolTransportProgram
 catchmentSchool
 catchmentProgram
 placingGrade
 inSpecialAdmissionRegion
 isNewlyArrived
 currentSchoolMunicipality
 currentSchoolName
 currentSchoolProgram
 currentPreSchoolMunicipality
 currentPreSchool
 placementAddress
 placementZipcode
 placementCity
 choice
 schoolMunicipality
 schoolName
 schoolProgram
 ranking participantType } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * List all choices &amp; ranks for a given studentSsn, require operator right
     * */
    public listForStudent = (studentSsn: string): Promise<IChoiceWithRankings[]> => {
        const query = `query choice_listForStudent($studentSsn: String) {
    choice_listForStudent(studentSsn: $studentSsn)
     { afterSchool
 approvedParent1
 approvedParent2
 choiceId
 createdAt
 createdBy
 language
 manualInput
 manuallyApprovedBy
 placementRoundId
 studentFirstName
 studentLastName
 studentSsn rankings { choice
 schoolMunicipality
 schoolName
 schoolProgram
 ranking } } 
}`;
        return this.post({ query, variables: { studentSsn: studentSsn } });
    }

    
    /**
     * Creates a new choice for a student, the new one is then active OPERATOR access
     * */
    public createChoice = (choice: INewChoiceInputType): Promise<IChoiceWithRankings> => {
        const query = `mutation choice_createChoice($choice: NewChoiceInputType) {
    choice_createChoice(choice: $choice)
     { afterSchool
 approvedParent1
 approvedParent2
 choiceId
 createdAt
 createdBy
 language
 manualInput
 manuallyApprovedBy
 placementRoundId
 studentFirstName
 studentLastName
 studentSsn rankings { choice
 schoolMunicipality
 schoolName
 schoolProgram
 ranking } } 
}`;
        return this.post({ query, variables: { choice: choice } });
    }

    
    /**
     * Manually set a parent has having approved
     * */
    public forceApprove = (choiceId: number, parentSsn: string): Promise<IChoice> => {
        const query = `mutation choice_forceApprove($choiceId: Int, $parentSsn: String) {
    choice_forceApprove(choiceId: $choiceId, parentSsn: $parentSsn)
     { choiceId
 createdAt
 createdBy
 placementRoundId
 studentSsn
 manualInput
 approvedParent1
 approvedParent2
 manuallyApprovedBy
 language
 afterSchool } 
}`;
        return this.post({ query, variables: { choiceId: choiceId,parentSsn: parentSsn } });
    }

    
    /**
     * Manually removes the approval of a parent for a choice
     * */
    public forceRemoveApproval = (choiceId: number, parentSsn: string): Promise<IChoice> => {
        const query = `mutation choice_forceRemoveApproval($choiceId: Int, $parentSsn: String) {
    choice_forceRemoveApproval(choiceId: $choiceId, parentSsn: $parentSsn)
     { choiceId
 createdAt
 createdBy
 placementRoundId
 studentSsn
 manualInput
 approvedParent1
 approvedParent2
 manuallyApprovedBy
 language
 afterSchool } 
}`;
        return this.post({ query, variables: { choiceId: choiceId,parentSsn: parentSsn } });
    }

    
    /**
     * Sets a choice as approved, regardless of parental answer
     * */
    public manuallyApprove = (choiceId: number): Promise<IChoice> => {
        const query = `mutation choice_manuallyApprove($choiceId: Int) {
    choice_manuallyApprove(choiceId: $choiceId)
     { choiceId
 createdAt
 createdBy
 placementRoundId
 studentSsn
 manualInput
 approvedParent1
 approvedParent2
 manuallyApprovedBy
 language
 afterSchool } 
}`;
        return this.post({ query, variables: { choiceId: choiceId } });
    }

    
    /**
     * Remove the manual approval if one exists
     * */
    public removeManualApproval = (choiceId: number): Promise<IChoice> => {
        const query = `mutation choice_removeManualApproval($choiceId: Int) {
    choice_removeManualApproval(choiceId: $choiceId)
     { choiceId
 createdAt
 createdBy
 placementRoundId
 studentSsn
 manualInput
 approvedParent1
 approvedParent2
 manuallyApprovedBy
 language
 afterSchool } 
}`;
        return this.post({ query, variables: { choiceId: choiceId } });
    }

    
    /**
     * Uploads choices and splits them up
     * */
    public uploadChoice = (uploadChoices: IUploadChoice[]): Promise<void> => {
        const query = `mutation choice_uploadChoice($uploadChoices: [UploadChoice]) {
    choice_uploadChoice(uploadChoices: $uploadChoices)
     { undefined } 
}`;
        return this.post({ query, variables: { uploadChoices: uploadChoices } });
    }

}
