/**
 * Autogenerated interface, DO NOT MODIFY
 */
/* tslint:disable */
import { GraphDao } from "./graph-dao";
import { IUser } from "./interfaces/user.generated"; 
import { ISecurityGroupMember } from "./interfaces/security-group-member.generated"; 

export class UserDao extends GraphDao {
    
    /**
     * Get user given username, user must be in same municipality, if not root
     * */
    public getUser = (username: string): Promise<IUser> => {
        const query = `query user_getUser($username: String) {
    user_getUser(username: $username)
     { undefined } 
}`;
        return this.post({ query, variables: { username: username } });
    }

    
    /**
     * Returns a list of all users
     * */
    public listAllUsers = (): Promise<IUser[]> => {
        const query = `query user_listAllUsers {
    user_listAllUsers
     { undefined } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Makes no other security check, only allow for root or x-mun privilage
     * */
    public listUsersForMunicipality = (municipality: string): Promise<IUser[]> => {
        const query = `query user_listUsersForMunicipality($municipality: String) {
    user_listUsersForMunicipality(municipality: $municipality)
     { undefined } 
}`;
        return this.post({ query, variables: { municipality: municipality } });
    }

    
    /**
     * Returns a list of all users for users municipality
     * */
    public listUsersInMyMunicipality = (): Promise<IUser[]> => {
        const query = `query user_listUsersInMyMunicipality {
    user_listUsersInMyMunicipality
     { undefined } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * add a list of users to be added to db
     * */
    public bulkAddUser = (users: IUser[]): Promise<void> => {
        const query = `mutation user_bulkAddUser($users: [UserInput]) {
    user_bulkAddUser(users: $users)
     { undefined } 
}`;
        return this.post({ query, variables: { users: users } });
    }

    
    /**
     * Upload security group memberships, only username and groupname looked at
     * */
    public bulkUploadGroupMemberships = (groupMembers: ISecurityGroupMember[]): Promise<void> => {
        const query = `mutation user_bulkUploadGroupMemberships($groupMembers: [SecurityGroupMemberInput]) {
    user_bulkUploadGroupMemberships(groupMembers: $groupMembers)
     { undefined } 
}`;
        return this.post({ query, variables: { groupMembers: groupMembers } });
    }

    
    /**
     * Creates a new user, manager can only add in own municipality and not add root priv
     * */
    public createUser = (groups: string[], user: IUser): Promise<void> => {
        const query = `mutation user_createUser($groups: [String], $user: UserInput) {
    user_createUser(groups: $groups, user: $user)
     { undefined } 
}`;
        return this.post({ query, variables: { groups: groups,user: user } });
    }

    
    /**
     * Updates a user
     * */
    public updateUser = (user: IUser): Promise<void> => {
        const query = `mutation user_updateUser($user: UserInput) {
    user_updateUser(user: $user)
     { undefined } 
}`;
        return this.post({ query, variables: { user: user } });
    }

}
