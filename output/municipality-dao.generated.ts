/**
 * Autogenerated interface, DO NOT MODIFY
 */
/* tslint:disable */
import { GraphDao } from "./graph-dao";
import { IMunicipality } from "./interfaces/municipality.generated"; 
import { IUploadedFile } from "./interfaces/uploaded-file.generated"; 
import { IMunicipalityTimelineEvent } from "./interfaces/municipality-timeline-event.generated"; 
import { TABLE } from "./enums/table.generated"; 
import { IUploadInputType } from "./interfaces/upload-input-type.generated"; 

export class MunicipalityDao extends GraphDao {
    
    /**
     * returns all municipalities
     * */
    public listAll = (): Promise<IMunicipality[]> => {
        const query = `query municipality_listAll {
    municipality_listAll
     { municipalityName
 county
 longName
 isCustomer
 openingTime
 closingTime
 frontPageState } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * returns all municipality that are customers
     * */
    public listCustomers = (): Promise<IMunicipality[]> => {
        const query = `query municipality_listCustomers {
    municipality_listCustomers
     { municipalityName
 county
 longName
 isCustomer
 openingTime
 closingTime
 frontPageState } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * List files foe a municipality
     * */
    public listFiles = (): Promise<IUploadedFile[]> => {
        const query = `query municipality_listFiles {
    municipality_listFiles
     { fileId
 createdAt
 createdBy
 municipality
 filename
 originalName
 deleted
 uploadParentId
 bucket
 path
 mimeType
 size uploadParentType contentType } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * List files shared between municipalities
     * */
    public listSharedFiles = (): Promise<IUploadedFile[]> => {
        const query = `query municipality_listSharedFiles {
    municipality_listSharedFiles
     { fileId
 createdAt
 createdBy
 municipality
 filename
 originalName
 deleted
 uploadParentId
 bucket
 path
 mimeType
 size uploadParentType contentType } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * returns all municipality events for a municipalitys timeline
     * */
    public listTimelineEvents = (): Promise<IMunicipalityTimelineEvent[]> => {
        const query = `query municipality_listTimelineEvents {
    municipality_listTimelineEvents
     { municipalityName
 timelineIndex
 datum
 label
 description } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Set a state for a municiaplity
     * */
    public changeState = (municipality: string, newState: string): Promise<void> => {
        const query = `mutation municipality_changeState($municipality: String, $newState: String) {
    municipality_changeState(municipality: $municipality, newState: $newState)
     { undefined } 
}`;
        return this.post({ query, variables: { municipality: municipality,newState: newState } });
    }

    
    /**
     * Flags a file as deleted
     * */
    public deleteFile = (fileId: number): Promise<void> => {
        const query = `mutation municipality_deleteFile($fileId: Int) {
    municipality_deleteFile(fileId: $fileId)
     { undefined } 
}`;
        return this.post({ query, variables: { fileId: fileId } });
    }

    
    /**
     * Set a municipality as a customer
     * */
    public flagAsCustomer = (municipality: string): Promise<void> => {
        const query = `mutation municipality_flagAsCustomer($municipality: String) {
    municipality_flagAsCustomer(municipality: $municipality)
     { undefined } 
}`;
        return this.post({ query, variables: { municipality: municipality } });
    }

    
    /**
     * Removes a municipality as customer
     * */
    public removeAsCusomer = (municipality: string): Promise<void> => {
        const query = `mutation municipality_removeAsCusomer($municipality: String) {
    municipality_removeAsCusomer(municipality: $municipality)
     { undefined } 
}`;
        return this.post({ query, variables: { municipality: municipality } });
    }

    
    /**
     * reloads all navet for a municipality
     * */
    public replayNavetStudents = (municipality: string): Promise<void> => {
        const query = `mutation municipality_replayNavetStudents($municipality: String) {
    municipality_replayNavetStudents(municipality: $municipality)
     { undefined } 
}`;
        return this.post({ query, variables: { municipality: municipality } });
    }

    
    /**
     * Set a municipality as a customer
     * */
    public truncateDatabase = (tables: TABLE[]): Promise<void> => {
        const query = `mutation municipality_truncateDatabase($tables: [TABLE]) {
    municipality_truncateDatabase(tables: $tables)
     { undefined } 
}`;
        return this.post({ query, variables: { tables: tables } });
    }

    
    /**
     * Upload a file to user municipality, file content should be in base64, returns file id
     * */
    public uploadFile = (file: IUploadInputType, isShared: boolean): Promise<number> => {
        const query = `mutation municipality_uploadFile($file: UploadInputType, $isShared: Boolean) {
    municipality_uploadFile(file: $file, isShared: $isShared)
     { undefined } 
}`;
        return this.post({ query, variables: { file: file,isShared: isShared } });
    }

}
