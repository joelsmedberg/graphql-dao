/**
 * Autogenerated interface, DO NOT MODIFY
 */
/* tslint:disable */
import { GraphDao } from "./graph-dao";
import { IViewPrivateSchoolAdmission } from "./interfaces/view-private-school-admission.generated"; 
import { IPrivateSchoolAdmission } from "./interfaces/private-school-admission.generated"; 

export class PrivateSchoolAdmissionsDao extends GraphDao {
    
    /**
     * List all admission for a school
     * */
    public listAdmissionForSchool = (schoolMunicipality: string, schoolName: string): Promise<IViewPrivateSchoolAdmission[]> => {
        const query = `query privateSchoolAdmissions_listAdmissionForSchool($schoolMunicipality: String, $schoolName: String) {
    privateSchoolAdmissions_listAdmissionForSchool(schoolMunicipality: $schoolMunicipality, schoolName: $schoolName)
     { schoolMunicipality
 schoolName
 schoolProgram
 studentSsn
 firstName
 lastName
 admissionStatus
 priority
 placingGrade
 isMatched
 numPlacements
 isDoublePlaced } 
}`;
        return this.post({ query, variables: { schoolMunicipality: schoolMunicipality,schoolName: schoolName } });
    }

    
    /**
     * List all private admissions for a student
     * */
    public listAdmissionForStudent = (studentSsn: string): Promise<IPrivateSchoolAdmission[]> => {
        const query = `query privateSchoolAdmissions_listAdmissionForStudent($studentSsn: String) {
    privateSchoolAdmissions_listAdmissionForStudent(studentSsn: $studentSsn)
     { undefined } 
}`;
        return this.post({ query, variables: { studentSsn: studentSsn } });
    }

    
    /**
     * List all admission for a school
     * */
    public listAdmissions = (): Promise<IViewPrivateSchoolAdmission[]> => {
        const query = `query privateSchoolAdmissions_listAdmissions {
    privateSchoolAdmissions_listAdmissions
     { schoolMunicipality
 schoolName
 schoolProgram
 studentSsn
 firstName
 lastName
 admissionStatus
 priority
 placingGrade
 isMatched
 numPlacements
 isDoublePlaced } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Send in a list of ssn and check which ones are in db. Requires operator rights
     * */
    public validateSsnList = (ssnList: string[]): Promise<string[]> => {
        const query = `query privateSchoolAdmissions_validateSsnList($ssnList: [String]) {
    privateSchoolAdmissions_validateSsnList(ssnList: $ssnList)
     { undefined } 
}`;
        return this.post({ query, variables: { ssnList: ssnList } });
    }

    
    /**
     * Upload a list of private school admissions
     * */
    public addAdmissions = (admissions: IPrivateSchoolAdmission[]): Promise<void> => {
        const query = `mutation privateSchoolAdmissions_addAdmissions($admissions: [PrivateSchoolAdmissionInput]) {
    privateSchoolAdmissions_addAdmissions(admissions: $admissions)
     { undefined } 
}`;
        return this.post({ query, variables: { admissions: admissions } });
    }

    
    /**
     * Deletes all admissions for a private school list
     * */
    public deleteForSchool = (schoolMunicipality: string, schoolName: string): Promise<void> => {
        const query = `mutation privateSchoolAdmissions_deleteForSchool($schoolMunicipality: String, $schoolName: String) {
    privateSchoolAdmissions_deleteForSchool(schoolMunicipality: $schoolMunicipality, schoolName: $schoolName)
     { undefined } 
}`;
        return this.post({ query, variables: { schoolMunicipality: schoolMunicipality,schoolName: schoolName } });
    }

    
    /**
     * set a new status for an admission
     * */
    public setAdmissionStatus = (psv: IPrivateSchoolAdmission): Promise<void> => {
        const query = `mutation privateSchoolAdmissions_setAdmissionStatus($psv: PrivateSchoolAdmissionInput) {
    privateSchoolAdmissions_setAdmissionStatus(psv: $psv)
     { undefined } 
}`;
        return this.post({ query, variables: { psv: psv } });
    }

    
    /**
     * Upload a list of private school admissions
     * */
    public tryAddAdmission = (admission: IPrivateSchoolAdmission): Promise<void> => {
        const query = `mutation privateSchoolAdmissions_tryAddAdmission($admission: PrivateSchoolAdmissionInput) {
    privateSchoolAdmissions_tryAddAdmission(admission: $admission)
     { undefined } 
}`;
        return this.post({ query, variables: { admission: admission } });
    }

}
