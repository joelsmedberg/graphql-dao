/**
 * Autogenerated interface, DO NOT MODIFY
 */
/* tslint:disable */
import { GraphDao } from "./graph-dao";
import { ISecurityRight } from "./interfaces/security-right.generated"; 
import { ISecurityGroup } from "./interfaces/security-group.generated"; 
import { ISecurityGroupMember } from "./interfaces/security-group-member.generated"; 
import { ISecurityGroupRight } from "./interfaces/security-group-right.generated"; 

export class SecurityDao extends GraphDao {
    
    /**
     * list all possible security rights a user can have
     * */
    public listAllSecurityRights = (): Promise<ISecurityRight[]> => {
        const query = `query security_listAllSecurityRights {
    security_listAllSecurityRights
     { securityRight
 endpoint
 description
 authType
 sensitivity
 namespace
 mutating } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * list all security groups a user can be a member of
     * */
    public listGroups = (): Promise<ISecurityGroup[]> => {
        const query = `query security_listGroups {
    security_listGroups
     { groupName
 createdAt
 description } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Get rights for a given username, user must be in same municipality, if not root
     * */
    public listGroupsForUser = (username: string): Promise<ISecurityGroupMember[]> => {
        const query = `query security_listGroupsForUser($username: String) {
    security_listGroupsForUser(username: $username)
     { undefined } 
}`;
        return this.post({ query, variables: { username: username } });
    }

    
    /**
     * Get rights for a given username, user must be in same municipality, if not root
     * */
    public listRightsForUser = (username: string): Promise<string[]> => {
        const query = `query security_listRightsForUser($username: String) {
    security_listRightsForUser(username: $username)
     { undefined } 
}`;
        return this.post({ query, variables: { username: username } });
    }

    
    /**
     * list all groups rights
     * */
    public listSecurityRightsForGroup = (groupName: string): Promise<ISecurityGroupRight[]> => {
        const query = `query security_listSecurityRightsForGroup($groupName: String) {
    security_listSecurityRightsForGroup(groupName: $groupName)
     { groupName
 securityRight } 
}`;
        return this.post({ query, variables: { groupName: groupName } });
    }

    
    /**
     * Returns the municipality of the loggedin parent
     * */
    public addUserToGroup = (groupName: string, username: string): Promise<void> => {
        const query = `mutation security_addUserToGroup($groupName: String, $username: String) {
    security_addUserToGroup(groupName: $groupName, username: $username)
     { undefined } 
}`;
        return this.post({ query, variables: { groupName: groupName,username: username } });
    }

    
    /**
     * Adds a new right to the a user, requiers either root or approrpiate priv
     * */
    public removeUserRight = (groupName: string, username: string): Promise<void> => {
        const query = `mutation security_removeUserRight($groupName: String, $username: String) {
    security_removeUserRight(groupName: $groupName, username: $username)
     { undefined } 
}`;
        return this.post({ query, variables: { groupName: groupName,username: username } });
    }

}
