/**
 * Autogenerated interface, DO NOT MODIFY
 */
/* tslint:disable */
import { GraphDao } from "./graph-dao";
import { IStudent } from "./interfaces/student.generated"; 
import { IViewParticipantWithStudent } from "./interfaces/view-participant-with-student.generated"; 
import { IParticipant } from "./interfaces/participant.generated"; 
import { IStudentLog } from "./interfaces/student-log.generated"; 
import { IViewParticipantDisplay } from "./interfaces/view-participant-display.generated"; 
import { IViewPotentialNewParticipants } from "./interfaces/view-potential-new-participants.generated"; 

export class StudentDao extends GraphDao {
    
    /**
     * List all students for a parent. Requires operator rights
     * */
    public getForParent = (parentSsn: string): Promise<IStudent[]> => {
        const query = `query student_getForParent($parentSsn: String) {
    student_getForParent(parentSsn: $parentSsn)
     { undefined } 
}`;
        return this.post({ query, variables: { parentSsn: parentSsn } });
    }

    
    /**
     * returns IViewParticipantWithStudent for a ssn
     * */
    public getParticipant = (placementRoundId: number, studentSsn: string): Promise<IViewParticipantWithStudent> => {
        const query = `query student_getParticipant($placementRoundId: Int, $studentSsn: String) {
    student_getParticipant(placementRoundId: $placementRoundId, studentSsn: $studentSsn)
     { placementRoundId
 studentSsn
 schoolTransportSchool
 schoolTransportProgram
 catchmentSchool
 catchmentProgram
 currentGrade
 placingGrade
 inSpecialAdmissionRegion
 isNewlyArrived
 currentSchoolMunicipality
 currentSchoolName
 currentSchoolProgram
 currentPreSchoolMunicipality
 currentPreSchool
 placementAddress
 placementZipcode
 placementCity
 placementAddressMunicipality
 placementLat
 placementLng
 limitedParticipation
 municipalityCaseId
 isVoucherSchoolOnly
 municipality
 createdAt
 updatedAt
 createdBy
 lockNavetUpdates
 lotteryNumber
 debugHelpColumn
 isTestKid
 firstName
 lastName
 parent1
 parent2
 coAddress
 address
 zipcode
 city
 addressMunicipality
 lat
 lng participantType createdVia navetLookupStatus } 
}`;
        return this.post({ query, variables: { placementRoundId: placementRoundId,studentSsn: studentSsn } });
    }

    
    /**
     * Returns student for studentSsn
     * */
    public getStudent = (studentSsn: string): Promise<IStudent> => {
        const query = `query student_getStudent($studentSsn: String) {
    student_getStudent(studentSsn: $studentSsn)
     { undefined } 
}`;
        return this.post({ query, variables: { studentSsn: studentSsn } });
    }

    
    /**
     * Returns all participants for a round. Use 0 to get latest
     * */
    public listAllParticipants = (placementRoundId: number): Promise<IParticipant[]> => {
        const query = `query student_listAllParticipants($placementRoundId: Int) {
    student_listAllParticipants(placementRoundId: $placementRoundId)
     { undefined } 
}`;
        return this.post({ query, variables: { placementRoundId: placementRoundId } });
    }

    
    /**
     * Returns all students in your municipality
     * */
    public listAllStudents = (): Promise<IStudent[]> => {
        const query = `query student_listAllStudents {
    student_listAllStudents
     { undefined } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * List all students not looked up
     * */
    public listAwaitingLookup = (): Promise<IStudent[]> => {
        const query = `query student_listAwaitingLookup {
    student_listAwaitingLookup
     { undefined } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Send in a list of ssn and check which ones are in db. Requires operator rights
     * */
    public listLogentriesForStudent = (limit: number, studentSsn: string): Promise<IStudentLog[]> => {
        const query = `query student_listLogentriesForStudent($limit: Int, $studentSsn: String) {
    student_listLogentriesForStudent(limit: $limit, studentSsn: $studentSsn)
     { studentLogId
 municipality
 studentSsn
 createdAt
 createdBy
 createdByParent
 eventType
 eventBodyJson
 userComment
 fileId
 severityLevel } 
}`;
        return this.post({ query, variables: { limit: limit,studentSsn: studentSsn } });
    }

    
    /**
     * Returns all participants for display
     * */
    public listParticipantsMainDisplay = (placementRoundId: number): Promise<IViewParticipantDisplay[]> => {
        const query = `query student_listParticipantsMainDisplay($placementRoundId: Int) {
    student_listParticipantsMainDisplay(placementRoundId: $placementRoundId)
     { placementRoundId
 studentSsn
 schoolTransportSchool
 schoolTransportProgram
 catchmentSchool
 catchmentProgram
 placingGrade
 inSpecialAdmissionRegion
 isNewlyArrived
 currentSchoolMunicipality
 currentSchoolName
 currentSchoolProgram
 currentPreSchoolMunicipality
 currentPreSchool
 placementAddress
 placementZipcode
 placementCity
 placementAddressMunicipality
 limitedParticipation
 municipalityCaseId
 municipality
 createdAt
 firstName
 lastName
 parent1
 parent2
 coAddress
 address
 zipcode
 city
 addressMunicipality
 currentGrade
 lotteryNumber
 lat
 lng
 debugHelpColumn
 hasCompleteChoice
 parent1FirstName
 parent1LastName
 parent1CoAddress
 parent1Address
 parent1Zipcode
 parent1City
 parent2FirstName
 parent2LastName
 parent2CoAddress
 parent2Address
 parent2Zipcode
 parent2City
 parent1Phone
 parent1Email
 parent2Phone
 parent2Email
 optOut
 numChoicesMade participantType } 
}`;
        return this.post({ query, variables: { placementRoundId: placementRoundId } });
    }

    
    /**
     * Returns all participants joined with students. Use 0 to get latest
     * */
    public listParticipantsWithStudent = (placementRoundId: number): Promise<IViewParticipantWithStudent[]> => {
        const query = `query student_listParticipantsWithStudent($placementRoundId: Int) {
    student_listParticipantsWithStudent(placementRoundId: $placementRoundId)
     { placementRoundId
 studentSsn
 schoolTransportSchool
 schoolTransportProgram
 catchmentSchool
 catchmentProgram
 currentGrade
 placingGrade
 inSpecialAdmissionRegion
 isNewlyArrived
 currentSchoolMunicipality
 currentSchoolName
 currentSchoolProgram
 currentPreSchoolMunicipality
 currentPreSchool
 placementAddress
 placementZipcode
 placementCity
 placementAddressMunicipality
 placementLat
 placementLng
 limitedParticipation
 municipalityCaseId
 isVoucherSchoolOnly
 municipality
 createdAt
 updatedAt
 createdBy
 lockNavetUpdates
 lotteryNumber
 debugHelpColumn
 isTestKid
 firstName
 lastName
 parent1
 parent2
 coAddress
 address
 zipcode
 city
 addressMunicipality
 lat
 lng participantType createdVia navetLookupStatus } 
}`;
        return this.post({ query, variables: { placementRoundId: placementRoundId } });
    }

    
    /**
     * Returns student for studentSsn
     * */
    public listPotentialNewParticipant = (): Promise<IViewPotentialNewParticipants[]> => {
        const query = `query student_listPotentialNewParticipant {
    student_listPotentialNewParticipant
     { placementRoundId
 municipality
 studentSsn
 createdAt
 updatedAt
 createdBy
 lockNavetUpdates
 lotteryNumber
 debugHelpColumn
 isTestKid
 firstName
 lastName
 parent1
 parent2
 coAddress
 address
 zipcode
 city
 addressMunicipality
 lat
 lng
 hasApprovedOptOut createdVia navetLookupStatus } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Send in a list of ssn and check which ones are in db. Requires operator rights
     * */
    public studentsFromSsnList = (ssnList: string[]): Promise<IStudent[]> => {
        const query = `query student_studentsFromSsnList($ssnList: [String]) {
    student_studentsFromSsnList(ssnList: $ssnList)
     { undefined } 
}`;
        return this.post({ query, variables: { ssnList: ssnList } });
    }

    
    /**
     * Send in a list of ssn and check which ones are in db. Requires operator rights
     * */
    public validateParticipantList = (placementRoundId: number, ssnList: string[]): Promise<string[]> => {
        const query = `query student_validateParticipantList($placementRoundId: Int, $ssnList: [String]) {
    student_validateParticipantList(placementRoundId: $placementRoundId, ssnList: $ssnList)
     { undefined } 
}`;
        return this.post({ query, variables: { placementRoundId: placementRoundId,ssnList: ssnList } });
    }

    
    /**
     * Send in a list of ssn and check which ones are in db. Requires operator rights
     * */
    public validateSsnList = (ssnList: string[]): Promise<string[]> => {
        const query = `query student_validateSsnList($ssnList: [String]) {
    student_validateSsnList(ssnList: $ssnList)
     { undefined } 
}`;
        return this.post({ query, variables: { ssnList: ssnList } });
    }

    
    /**
     * Add a new student by looking up ssn at weblookup. Requires operator rights
     * */
    public addByWebLookup = (studentSsn: string): Promise<IStudent> => {
        const query = `mutation student_addByWebLookup($studentSsn: String) {
    student_addByWebLookup(studentSsn: $studentSsn)
     { undefined } 
}`;
        return this.post({ query, variables: { studentSsn: studentSsn } });
    }

    
    /**
     * Creates a new students, fails if student already exists. Requires operator rights
     * */
    public bulkAddPartcipant = (participants: IParticipant[]): Promise<void> => {
        const query = `mutation student_bulkAddPartcipant($participants: [ParticipantInput]) {
    student_bulkAddPartcipant(participants: $participants)
     { undefined } 
}`;
        return this.post({ query, variables: { participants: participants } });
    }

    
    /**
     * Creates a new students, fails if student already exists. Requires operator rights
     * */
    public bulkCreateNew = (students: IStudent[]): Promise<void> => {
        const query = `mutation student_bulkCreateNew($students: [StudentInput]) {
    student_bulkCreateNew(students: $students)
     { undefined } 
}`;
        return this.post({ query, variables: { students: students } });
    }

    
    /**
     * Creates a new students, fails if student already exists. Requires operator rights
     * */
    public bulkSoftUpdateParticipant = (participants: IParticipant[]): Promise<void> => {
        const query = `mutation student_bulkSoftUpdateParticipant($participants: [ParticipantInput]) {
    student_bulkSoftUpdateParticipant(participants: $participants)
     { undefined } 
}`;
        return this.post({ query, variables: { participants: participants } });
    }

    
    /**
     * Update, fails if student doesn&#x27;t exist. Requires operator rights
     * */
    public bulkUpdate = (students: IStudent[]): Promise<void> => {
        const query = `mutation student_bulkUpdate($students: [StudentInput]) {
    student_bulkUpdate(students: $students)
     { undefined } 
}`;
        return this.post({ query, variables: { students: students } });
    }

    
    /**
     * Creates a new student, fails if student already exists. Requires operator rights
     * */
    public createNew = (student: IStudent): Promise<IStudent> => {
        const query = `mutation student_createNew($student: StudentInput) {
    student_createNew(student: $student)
     { undefined } 
}`;
        return this.post({ query, variables: { student: student } });
    }

    
    /**
     * Refresh all the lottery numbers
     * */
    public refreshLotteryNumbers = (): Promise<void> => {
        const query = `mutation student_refreshLotteryNumbers {
    student_refreshLotteryNumbers
     { undefined } 
}`;
        return this.post({ query, variables: {  } });
    }

    
    /**
     * Removes a student from a participation round, returns true if participant is changed to voucher school only insteada
     * */
    public removeFromAdmissionRound = (placementRoundId: number, studentSsn: string): Promise<boolean> => {
        const query = `mutation student_removeFromAdmissionRound($placementRoundId: Int, $studentSsn: String) {
    student_removeFromAdmissionRound(placementRoundId: $placementRoundId, studentSsn: $studentSsn)
     { undefined } 
}`;
        return this.post({ query, variables: { placementRoundId: placementRoundId,studentSsn: studentSsn } });
    }

    
    /**
     * Update existing student. Requires operator rights
     * */
    public update = (student: IStudent): Promise<IStudent> => {
        const query = `mutation student_update($student: StudentInput) {
    student_update(student: $student)
     { undefined } 
}`;
        return this.post({ query, variables: { student: student } });
    }

}
